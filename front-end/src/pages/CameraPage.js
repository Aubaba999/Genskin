import React, { useRef, useState, useEffect } from 'react';
import './CameraPage.css';

function CameraPage() {
  const videoRef = useRef(null);
  const canvasRef = useRef(null);
  const [isCameraOn, setIsCameraOn] = useState(false);
  const [stream, setStream] = useState(null);
  const [faceDetected, setFaceDetected] = useState(false);
  const [facePosition, setFacePosition] = useState({ x: 0, y: 0 });
  const [direction, setDirection] = useState('');
  const [isPageVisible, setIsPageVisible] = useState(true);
  const [faceInFrame, setFaceInFrame] = useState(false); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡πÑ‡∏´‡∏°

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  useEffect(() => {
    const handleVisibilityChange = () => {
      setIsPageVisible(!document.hidden);
    };

    const handleBeforeUnload = () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
    };

    const handlePageHide = () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('beforeunload', handleBeforeUnload);
    window.addEventListener('pagehide', handlePageHide);

    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('pagehide', handlePageHide);
    };
  }, [stream]);

  // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  useEffect(() => {
    if (isPageVisible) {
      startCamera();
    } else {
      stopCamera();
    }
  }, [isPageVisible]);

  // Face detection simulation
  useEffect(() => {
    let interval;
    if (isCameraOn && isPageVisible) {
      interval = setInterval(() => {
        simulateFaceDetection();
      }, 500);
    }
    return () => clearInterval(interval);
  }, [isCameraOn, isPageVisible]);

  const startCamera = async () => {
    try {
      const newStream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'user',
          width: { ideal: 1280 },
          height: { ideal: 720 }
        } 
      });
      if (videoRef.current) {
        videoRef.current.srcObject = newStream;
        setStream(newStream);
        setIsCameraOn(true);
      }
    } catch (err) {
      console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:", err);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ");
    }
  };

  const stopCamera = () => {
    if (stream) {
      stream.getTracks().forEach(track => track.stop());
      if (videoRef.current) {
        videoRef.current.srcObject = null;
      }
      setStream(null);
      setIsCameraOn(false);
      setFaceDetected(false);
      setFaceInFrame(false);
    }
  };

  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
  const simulateFaceDetection = () => {
    // ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    const detected = Math.random() > 0.3;
    setFaceDetected(detected);
    
    if (detected) {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
      const centerX = window.innerWidth / 2;
      const centerY = window.innerHeight / 2;
      const faceX = centerX + (Math.random() - 0.5) * 200;
      const faceY = centerY + (Math.random() - 0.5) * 200;
      
      setFacePosition({ x: faceX, y: faceY });
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏Ç‡∏¢‡∏±‡∏ö
      const deltaX = centerX - faceX;
      const deltaY = centerY - faceY;
      const threshold = 50;
      
      let newDirection = '';
      let inFrame = false;
      
      if (Math.abs(deltaX) > threshold || Math.abs(deltaY) > threshold) {
        if (Math.abs(deltaX) > Math.abs(deltaY)) {
          newDirection = deltaX > 0 ? '‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢' : '‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤';
        } else {
          newDirection = deltaY > 0 ? '‡∏´‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô' : '‡∏´‡∏±‡∏ô‡∏•‡∏á';
        }
        inFrame = false;
      } else {
        newDirection = '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡∏µ!';
        inFrame = true;
      }
      
      setDirection(newDirection);
      setFaceInFrame(inFrame);
    } else {
      setDirection('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏≠‡∏≤‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö');
      setFaceInFrame(false);
    }
  };

  const goHome = () => {
    stopCamera();
    // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ home
    // ‡πÄ‡∏ä‡πà‡∏ô router.push('/home') ‡∏´‡∏£‡∏∑‡∏≠ navigate('/home')
    console.log('Navigate to home');
  };

  return (
    <div className="camera-container">
      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö */}
      <button 
        onClick={goHome}
        className="back-button"
      >
        <svg 
          width="24" 
          height="24" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round"
        >
          <path d="m12 19-7-7 7-7"/>
          <path d="M19 12H5"/>
        </svg>
      </button>

      {/* ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ */}
      <video
        ref={videoRef}
        autoPlay
        playsInline
        muted
        className="camera-video"
      />

      {/* Green Overlay ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö */}
      {faceInFrame && (
        <div className="green-overlay"></div>
      )}

      {/* Canvas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• */}
      <canvas
        ref={canvasRef}
        className="camera-canvas"
      />

      {/* ‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ */}
      <div className="scan-frame-container">
        <div className="scan-frame-wrapper">
          {/* ‡∏Å‡∏£‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å */}
          <div className="scan-frame">
            {/* ‡∏°‡∏∏‡∏°‡∏Å‡∏£‡∏≠‡∏ö */}
            <div className="scan-corners">
              {/* ‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô */}
              <div 
                className={`corner corner-tl ${
                  faceInFrame ? 'corner-success' : 'corner-default'
                }`}
              />
              {/* ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô */}
              <div 
                className={`corner corner-tr ${
                  faceInFrame ? 'corner-success' : 'corner-default'
                }`}
              />
              {/* ‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á */}
              <div 
                className={`corner corner-bl ${
                  faceInFrame ? 'corner-success' : 'corner-default'
                }`}
              />
              {/* ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á */}
              <div 
                className={`corner corner-br ${
                  faceInFrame ? 'corner-success' : 'corner-default'
                }`}
              />
            </div>
            
            {/* ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏ö */}
            <div className={`frame-border ${faceInFrame ? 'frame-border-success' : 'frame-border-default'}`}></div>
          </div>
          
          {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */}
          <div className="direction-text">
            <div 
              className={`direction-message ${
                faceInFrame ? 'direction-success' : 'direction-default'
              }`}
            >
              {direction || '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤...'}
            </div>
          </div>
        </div>
      </div>

      {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á */}
      {!isPageVisible && (
        <div className="camera-paused">
          <div className="camera-paused-content">
            <div className="camera-paused-icon">üì∑</div>
            <div>‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö</div>
          </div>
        </div>
      )}
    </div>
  );
}

export default CameraPage;